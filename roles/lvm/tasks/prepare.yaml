---

- name: register lvm devices
  shell: "cat /proc/partitions | awk {' print $4 '} | grep ^{{device_name_prefix}} | grep -v {{device_name_prefix}}a | grep -v [0-9]"
  register: lvm_volumes

- set_fact:
    lvm_volumes_string: "{{  lvm_volumes.stdout_lines | map('regex_replace', '^(.*)$', '/dev/\\1') | map('regex_replace', '$', '1') | join(',') }}"
  when: lvm_volumes.stdout_lines is defined
# - name: register lvm devicestring
#   shell: "cat /proc/partitions | awk {' print $4 '} | grep ^{{device_name_prefix}} | grep -v {{device_name_prefix}}a | grep -v [0-9] | sed 's/^/\\/dev\\//;' | sed ':a;N;$!ba;s/\n/1,/g' | sed 's/$/1/'"
#   register: lvm_volumes_string

- debug:
    msg: "lvm_volumes: {{ item }}"
  with_items: "{{ lvm_volumes.stdout_lines }}"

- debug:
    msg: "lvm_volumes_string: {{ item }}"
  with_items: "{{ lvm_volumes_string }}"

- parted:
    device: /dev/{{ item }}
    number: 1
    flags: [ lvm ]
    state: present
  with_items: "{{ lvm_volumes.stdout_lines }}"

- name: running pvscan
  shell: pvscan

- name: create pvs if needed
  shell: if ! pvs | grep /dev/{{ item }}1; then pvcreate /dev/{{ item }}1; fi
  with_items: "{{ lvm_volumes.stdout_lines }}"

- name: Create volume group if not existing
  lvg:
    vg: "{{ item.value.vg }}"
    pvs: "{{ lvm_volumes_string }}"
    state: present
  with_dict: "{{ lv }}"

- name: Create logical volumes if not existing
  lvol:
    vg: "{{ item.value.vg }}"
    lv: "{{ item.value.name }}"
    size: "{{ item.value.size | default(default_volume_size) }}g"
    state: present
  with_dict: "{{ lv }}"

- name: Create filesystems if needed
  filesystem:
    fstype: "{{ server_volumes_filesystem }}"
    dev: /dev/{{ item.value.vg }}/{{ item.value.name }}
  with_dict: "{{ lv }}"
